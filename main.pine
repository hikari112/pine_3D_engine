// This source code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// Â© peacefulLizard50262

//@version=5
indicator("My script", max_bars_back = 5000)


type vector2
    float x
    float y

type vector3
    float x
    float y
    float z

type vector4
    float x
    float y
    float z
    float w

type vertex
    vector4 vector
    array<int> faces
    
type vertex2d
    vector2 vector
    array<int> faces

type face
    int v1
    int v2
    int v3

type mesh
    array<vertex> v
    array<face> f

type mesh2d
    array<vertex2d> v
    array<face> f

type location
    vector3 position
    vector3 theta
    float scale

type object
    mesh m
    location l

type poly4
    float x1
    float x2
    float y1
    float y2

type polyg
    poly4 l1
    poly4 l2
    poly4 l3

type camera
    vector3 pos //position
    vector3 tar //target
    float fov //field of view
    vector2 ar //aspect ratio
    vector2 vd //view distance

radians(degree)=>
    degree * math.pi/180

quat_identity() =>
    vector4.new(0, 0, 0, 1)

quat_from_axis_angle(axis, angle) =>
    s = math.sin(angle / 2)
    vector4.new(axis.x * s, axis.y * s, axis.z * s, math.cos(angle / 2))

quat_multiply(q1, q2) =>
    vector4.new(
     q1.w * q2.x + q1.x * q2.w + q1.y * q2.z - q1.z * q2.y,
     q1.w * q2.y - q1.x * q2.z + q1.y * q2.w + q1.z * q2.x,
     q1.w * q2.z + q1.x * q2.y - q1.y * q2.x + q1.z * q2.w,
     q1.w * q2.w - q1.x * q2.x - q1.y * q2.y - q1.z * q2.z
     )

quat_conjugate(q) =>
    vector4.new(-q.x, -q.y, -q.z, q.w)

quat_rotate(q, v) =>
    p = vector4.new(v.x, v.y, v.z, 0)
    qp = quat_multiply(q, p)
    qpq_inv = quat_multiply(qp, quat_conjugate(q))
    vector3.new(qpq_inv.x, qpq_inv.y, qpq_inv.z)

rotate_vector_by_quaternion(v, q) =>
    q_inv = vector4.new(-q.x, -q.y, -q.z, q.w)
    v_quat = vector4.new(v.x, v.y, v.z, 0)
    temp = quat_multiply(q, v_quat)
    result = quat_multiply(temp, q_inv)
    vector3.new(result.x, result.y, result.z)

scale_vector(vector, constant)=>
    vector4.new(vector.vector.x * constant, vector.vector.y * constant, vector.vector.z * constant, vector.vector.w)

scale_mesh(mesh mesh_obj, constant)=>
    new_vertex_list = array.new<vertex>(array.size(mesh_obj.v))
    for i = 0 to array.size(mesh_obj.v) - 1
        old_vertex = array.get(mesh_obj.v, i)
        new_vector = scale_vector(old_vertex, constant)
        new_vertex = vertex.new(vector4.new(new_vector.x, new_vector.y, new_vector.z, old_vertex.vector.w), old_vertex.faces)
        array.set(new_vertex_list, i, new_vertex)
    mesh.new(new_vertex_list, mesh_obj.f)

rotate_mesh(mesh_obj, axis, angle) =>
    rotation_quaternion = quat_from_axis_angle(axis, angle)
    new_vertex_list = array.new<vertex>(array.size(mesh_obj.v))
    for i = 0 to array.size(mesh_obj.v) - 1
        old_vertex = array.get(mesh_obj.v, i)
        new_vector = rotate_vector_by_quaternion(old_vertex.vector, rotation_quaternion)
        new_vertex = vertex.new(vector4.new(new_vector.x, new_vector.y, new_vector.z, old_vertex.vector.w), old_vertex.faces)
        array.set(new_vertex_list, i, new_vertex)
    mesh.new(new_vertex_list, mesh_obj.f)
 
quat_translate(src, offset)=>
    vector4.new(src.x + offset.x, src.y + offset.y, src.z + offset.z, src.w)

translate_mesh(mesh_obj, offset)=>
    new_vertex_list = array.new<vertex>(array.size(mesh_obj.v))
    for i = 0 to array.size(mesh_obj.v) - 1
        old_vertex = array.get(mesh_obj.v, i)
        new_vector = quat_translate(old_vertex.vector, offset)
        new_vertex = vertex.new(vector4.new(new_vector.x, new_vector.y, new_vector.z, old_vertex.vector.w), old_vertex.faces)
        array.set(new_vertex_list, i, new_vertex)
    mesh.new(new_vertex_list, mesh_obj.f)

perspective_transform(mesh msh, cam) =>
    transformed_vertices = array.new<vertex2d>(array.size(msh.v))
    fov_scale = math.tan(radians(cam.fov) / 2) * 2
    for i = 0 to array.size(msh.v) - 1
        vertex_position = array.get(msh.v, i).vector
        face_position   = array.get(msh.v, i).faces
        cam_to_vertex = vector3.new(vertex_position.x - cam.pos.x, vertex_position.y - cam.pos.y, vertex_position.z - cam.pos.z)
        z = cam_to_vertex.z

        x = cam_to_vertex.x / (z * cam.ar.x * fov_scale)
        y = cam_to_vertex.y / (z * cam.ar.y * fov_scale)

        array.set(transformed_vertices, i, vertex2d.new(vector2.new(x, y), face_position))

    mesh2d.new(transformed_vertices, msh.f)
 
process_object(obj, cam)=>
    axis_x = vector3.new(1, 0, 0)
    axis_y = vector3.new(0, 1, 0)
    axis_z = vector3.new(0, 0, 1)
    perspective_transform(
     scale_mesh(rotate_mesh(rotate_mesh(rotate_mesh(translate_mesh(obj.m, obj.l.position), axis_x, obj.l.theta.x), axis_y, obj.l.theta.y), axis_z, obj.l.theta.z), obj.l.scale),
     cam)

size(scene)=>
    var size = 0
    for i = 0 to array.size(scene) - 1
        obj = array.get(scene, i)
        obj_v = obj.v
        for j = 0 to array.size(obj.f) - 1
            size += j
    size

make_poly(scene)=>
    poly = array.new<polyg>(64)
    for i = 0 to array.size(scene) - 1
        obj = array.get(scene, i)
        obj_v = obj.v
        for j = 0 to array.size(obj.f) - 1
            v1 = array.get(obj.f, j).v1
            v2 = array.get(obj.f, j).v2
            v3 = array.get(obj.f, j).v3
            array.set(poly, j, polyg.new(
             poly4.new(array.get(obj_v, v1).vector.x, 
             array.get(obj_v, v2).vector.x, 
             array.get(obj_v, v1).vector.y, 
             array.get(obj_v, v2).vector.y), 
             poly4.new(array.get(obj_v, v2).vector.x, 
             array.get(obj_v, v3).vector.x, 
             array.get(obj_v, v2).vector.y, 
             array.get(obj_v, v3).vector.y), 
             poly4.new(array.get(obj_v, v3).vector.x, 
             array.get(obj_v, v1).vector.x, 
             array.get(obj_v, v3).vector.y, 
             array.get(obj_v, v1).vector.y)))
    poly

process_scene(scn, cam)=>
    new_scn = array.new<mesh2d>(array.size(scn))
    for i = 0 to array.size(scn) - 1
        new_object = process_object(array.get(scn, i), cam)
        array.set(new_scn, i, new_object)
    make_poly(new_scn)

x_pos = input.float(0)
y_pos = input.float(1)
z_pos = input.float(3)

x_look = input.float(0)
y_look = input.float(0)
z_look = input.float(0)

fov = input.float(45)

near = input.float(0.1)
far = input.float(20)

Camera = camera.new(vector3.new(x_pos, y_pos, z_pos), vector3.new(x_look, y_look, z_look), fov, vector2.new(1, 1), vector2.new(near, far))

pin_vertex_list = array.from(
 vertex.new(vector4.new(0, 0.5, 0, 1), array.from(0, 1, 2, 3, 4, 5, 6, 7)),              //0 a

 vertex.new(vector4.new( 0.0802,  0.3417,  0.0000, 1), array.from(0, 7, 8, 23)),  //1 b 
 vertex.new(vector4.new( 0.0567,  0.3417, -0.0567, 1), array.from(0, 1, 8, 9, 10, 11)),  //2 c 
 vertex.new(vector4.new( 0.0000,  0.3417, -0.0802, 1), array.from(1, 2, 11, 12)),  //3 d 
 vertex.new(vector4.new(-0.0567,  0.3417, -0.0567, 1), array.from(2, 3, 12, 13, 14, 15)), //4 e 
 vertex.new(vector4.new(-0.0802,  0.3417,  0.0000, 1), array.from(3, 4, 15, 16)),  //5 f 
 vertex.new(vector4.new(-0.0567,  0.3417,  0.0567, 1), array.from(4, 5, 16, 17, 18, 19)),  //6 g 
 vertex.new(vector4.new( 0.0000,  0.3417,  0.0802, 1), array.from(5, 6, 19, 20)),  //7 h 
 vertex.new(vector4.new( 0.0567,  0.3417,  0.0567, 1), array.from(6, 7, 20, 21, 22, 23)),  //8 i 

 vertex.new(vector4.new( 0.0599,  0.1667,  0.0000, 1), array.from(8, 9, 22, 23, 24, 25, 38, 39)),  //9 j
 vertex.new(vector4.new( 0.0424,  0.1667, -0.0424, 1), array.from(9, 10, 25, 26)),  //10 k 
 vertex.new(vector4.new( 0.0000,  0.1667, -0.0599, 1), array.from(10, 11, 12, 13, 26, 27, 28, 29)),  //11 l
 vertex.new(vector4.new(-0.0424,  0.1667, -0.0424, 1), array.from(13, 14, 29, 30)),  //12 m 
 vertex.new(vector4.new(-0.0599,  0.1667,  0.0000, 1), array.from(14, 15, 16, 17, 30, 31, 32, 33)),  //13 n
 vertex.new(vector4.new(-0.0424,  0.1667,  0.0424, 1), array.from(17, 18, 33, 34)),  //14 o 
 vertex.new(vector4.new( 0.0000,  0.1667,  0.0599, 1), array.from(18, 19, 20, 21, 34, 35, 36, 37)),  //15 p
 vertex.new(vector4.new( 0.0424,  0.1667,  0.0424, 1), array.from(21, 22, 37, 38)),  //16 q

 vertex.new(vector4.new( 0.1589, -0.2000,  0.0000, 1), array.from(24, 39, 40, 41)), //17 r
 vertex.new(vector4.new( 0.1124, -0.2000, -0.1124, 1), array.from(24, 25, 26, 27, 40, 42, 43, 44)), //18 s 
 vertex.new(vector4.new( 0.0000, -0.2000, -0.1589, 1), array.from(27, 28, 44, 45)), //19 t
 vertex.new(vector4.new(-0.1124, -0.2000, -0.1124, 1), array.from(28, 29, 30, 31, 45, 46, 47, 48)), //20 u 
 vertex.new(vector4.new(-0.1589, -0.2000,  0.0000, 1), array.from(31, 32, 48, 49)), //21 v
 vertex.new(vector4.new(-0.1124, -0.2000,  0.1124, 1), array.from(32, 33, 34, 35, 49, 50, 51, 52)), //22 w
 vertex.new(vector4.new( 0.0000, -0.2000,  0.1589, 1), array.from(35, 36, 52, 53)), //23 z
 vertex.new(vector4.new( 0.1124, -0.2000,  0.1124, 1), array.from(36, 37, 38, 39, 41, 53, 54, 55)), //24 a1

 vertex.new(vector4.new( 0.0677, -0.5000,  0.0000, 1), array.from(40, 41, 42, 55, 56, 63)), //25 b1
 vertex.new(vector4.new( 0.0479, -0.5000, -0.0479, 1), array.from(42, 43, 56, 57)), //26 c1
 vertex.new(vector4.new( 0.0000, -0.5000, -0.0677, 1), array.from(43, 44, 45, 46, 57, 58)), //27 d1
 vertex.new(vector4.new(-0.0479, -0.5000, -0.0479, 1), array.from(46, 47, 58, 59)), //28 e1
 vertex.new(vector4.new(-0.0677, -0.5000,  0.0000, 1), array.from(47, 48, 49, 50, 59, 60)), //29 f1
 vertex.new(vector4.new(-0.0479, -0.5000,  0.0479, 1), array.from(50, 51, 60, 61)), //30 g1
 vertex.new(vector4.new( 0.0000, -0.5000,  0.0677, 1), array.from(51, 52, 53, 54, 61, 62)), //31 h1
 vertex.new(vector4.new( 0.0479, -0.5000,  0.0479, 1), array.from(54, 55, 62, 63)), //32 i1
 
 vertex.new(vector4.new(0, -0.5, 0, 1), array.from(56, 57, 58, 59, 60, 61, 62, 63))                 //33 h1
 )

pin_face_list = array.from(
 face.new(0, 1, 2), //0
 face.new(0, 2, 3), //1
 face.new(0, 3, 4), //2
 face.new(0, 4, 5), //3
 face.new(0, 5, 6), //4
 face.new(0, 6, 7), //5
 face.new(0, 7, 8), //6
 face.new(0, 1, 8), //7
 face.new(1, 2, 9), //8
 face.new(2, 9, 10), //9
 face.new(2, 10, 11), //10
 face.new(2, 3, 11), //11
 face.new(3, 4, 11), //12
 face.new(4, 11, 12), //13
 face.new(4, 12, 13), //14
 face.new(4, 5, 13), //15
 face.new(5, 6, 13), //16
 face.new(6, 13, 14), //17
 face.new(6, 14, 15), //18
 face.new(6, 7, 15), //19
 face.new(7, 8, 15), //20
 face.new(8, 15, 16), //21
 face.new(8, 9, 16), //22
 face.new(1, 8, 9), //23
 face.new(9, 17, 18), //24
 face.new(9, 10, 18), //25
 face.new(10, 11, 18), //26
 face.new(11, 18, 19), //27
 face.new(11, 19, 20), //28
 face.new(11, 12, 20), //29
 face.new(12, 13, 20), //30
 face.new(13, 20, 21), //31
 face.new(13, 21, 22), //32
 face.new(13, 14, 22), //33
 face.new(14, 15, 22), //34
 face.new(15, 22, 23), //35
 face.new(15, 23, 24), //36
 face.new(15, 16, 24), //37
 face.new(9, 16, 24), //38
 face.new(9, 17, 24), //39
 face.new(17, 18, 25), //40
 face.new(17, 24, 25), //41 
 face.new(18, 25, 26), //42
 face.new(18, 26, 27), //43
 face.new(18, 19, 27), //44
 face.new(19, 20, 27), //45
 face.new(20, 27, 28), //46
 face.new(20, 28, 29), //47
 face.new(20, 21, 29), //48
 face.new(21, 22, 29), //49
 face.new(22, 29, 30), //50
 face.new(22, 30, 31), //51
 face.new(22, 23, 31), //52
 face.new(23, 24, 31), //53
 face.new(24, 31, 32), //54
 face.new(24, 25, 32), //55
 face.new(25, 26, 33), //56
 face.new(26, 27, 33), //57
 face.new(27, 28, 33), //58
 face.new(28, 29, 33), //59
 face.new(29, 30, 33), //60
 face.new(30, 31, 33), //61
 face.new(31, 32, 33), //62
 face.new(25, 32, 33)  //63
 )

pin_mesh = mesh.new(pin_vertex_list, pin_face_list)
import peacefulLizard50262/WaveGenerator/1 as w

object_x = input.float(0)
object_y = input.float(0)
object_z = input.float(0)

object_theta_x = input.float(0)
object_theta_y = input.float(0)
object_theta_z = input.float(0)

object_scale  = input.float(1)

pin1  = object.new(pin_mesh, location.new(vector3.new(object_x, object_y, object_z), vector3.new(object_theta_x, object_theta_y, object_theta_z), object_scale))
// pin2  = object.new(pin_mesh, location.new(vector3.new(0.75, 0.00, 0.00), vector3.new(0.00, 0.00, 0.00), 1))
// pin3  = object.new(pin_mesh, location.new(vector3.new(1.50, 0.00, 0.00), vector3.new(0.00, 0.00, 0.00), 1))
// pin4  = object.new(pin_mesh, location.new(vector3.new(2.25, 0.00, 0.00), vector3.new(0.00, 0.00, 0.00), 1))
// pin5  = object.new(pin_mesh, location.new(vector3.new(3.00, 0.00, 0.00), vector3.new(0.00, 0.00, 0.00), 1))
// pin6  = object.new(pin_mesh, location.new(vector3.new(3.75, 0.00, 0.00), vector3.new(0.00, 0.00, 0.00), 1))
// pin7  = object.new(pin_mesh, location.new(vector3.new(4.50, 0.00, 0.00), vector3.new(0.00, 0.00, 0.00), 1))
// pin8  = object.new(pin_mesh, location.new(vector3.new(6.25, 0.00, 0.00), vector3.new(0.00, 0.00, 0.00), 1))
// pin9  = object.new(pin_mesh, location.new(vector3.new(7.00, 0.00, 0.00), vector3.new(0.00, 0.00, 0.00), 1))
// pin10 = object.new(pin_mesh, location.new(vector3.new(7.75, 0.00, 0.00), vector3.new(0.00, 0.00, 0.00), 1))

scene_main = array.from(pin1)//, pin2, pin3, pin4, pin5, pin6, pin7, pin8, pin9, pin10)

scene_lines = process_scene(scene_main, Camera)
lines = array.new<line>(array.size(scene_lines))

time_quanta = (time[1] - last_bar_time)
left = chart.left_visible_bar_time
right = chart.right_visible_bar_time

center = (right + left)/2
scale_factor = input.float(1000)

if barstate.islast
    for i = 0 to array.size(scene_lines) - 1
        poly = array.get(scene_lines, i)
        array.push(lines, line.new(int(center + time_quanta * poly.l1.x1 * scale_factor), poly.l1.y1, int(center + time_quanta * poly.l1.x2 * scale_factor), poly.l1.y2, xloc.bar_time))
        array.push(lines, line.new(int(center + time_quanta * poly.l2.x1 * scale_factor), poly.l2.y1, int(center + time_quanta * poly.l2.x2 * scale_factor), poly.l2.y2, xloc.bar_time))
        array.push(lines, line.new(int(center + time_quanta * poly.l3.x1 * scale_factor), poly.l3.y1, int(center + time_quanta * poly.l3.x2 * scale_factor), poly.l3.y2, xloc.bar_time))
if barstate.isconfirmed
    for i = 0 to array.size(lines) - 1
        line.delete(array.get(lines, i))
hline(0)
hline(1)
